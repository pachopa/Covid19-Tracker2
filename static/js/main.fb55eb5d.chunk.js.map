{"version":3,"sources":["functional-components/styles.module.css","functional-components/cards.jsx","api/index.js","class-components/countrypicker.jsx","class-components/chart.jsx","images/covid.png","App.js","index.js","app.module.css","class-components/countryPicker.module.css","class-components/chart.module.css"],"names":["module","exports","Cards","fetchedCovidCasesData","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchDataByCountries","country","a","axios","get","data","console","log","message","fetchCountries","countries","fetchDailyData","map","date","reportDate","total","CountryPicker","props","state","fetchedCountries","fetchedAllCountries","result","name","this","setState","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","handleCountryChange","length","i","React","Component","Chart","fetchedDailyDataByCountry","labels","datasets","label","backgroundColor","options","legend","display","title","text","dailyData","borderColor","fill","barChart","App","useState","setfetchedCovidCasesData","setCountry","useEffect","initialFetchedData","fetchedDataByCountries","image","src","covidImage","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb55eb5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2anYb\",\"card\":\"styles_card__2VRMI\",\"infected\":\"styles_infected__1MdD_\",\"recovered\":\"styles_recovered__2AIwx\",\"deaths\":\"styles_deaths__rDiup\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport styles from \"./styles.module.css\";\r\nimport cx from \"classnames\";\r\n\r\nexport default function Cards({\r\n  fetchedCovidCasesData: { confirmed, recovered, deaths, lastUpdate },\r\n}) {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  } else {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.infected)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Infected\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={confirmed.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of active cases of Covid-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.recovered)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={recovered.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of recoveries from Covid-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.deaths)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={deaths.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of death caused by Covid-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/** What this does: Import Axios to have a promised-based HTTP GET request\r\n */\r\nimport axios from \"axios\";\r\n\r\n//base API URL\r\nconst url = \"http://covid19.mathdro.id/api\";\r\n\r\nexport const fetchDataByCountries = async (country) => {\r\n  /**\r\n   *  What this does: Request GET api to fetch corona cases data\r\n   *              such as confirmed, recovered, deaths cases and the update time\r\n   */\r\n\r\n  try {\r\n    /**\r\n     *  What this does: Fetch data based on the API url\r\n     *  Condition: if there is a country data, the GET request will receive only the specific country corona cases\r\n     *             Other than that, the code will receive all countries corona cases data\r\n     */\r\n\r\n    if (country) {\r\n      const {\r\n        data: { confirmed, recovered, deaths, lastUpdate },\r\n      } = await axios.get(`${url}/countries/${country}`);\r\n\r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    }\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(url);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (e) {\r\n    /**\r\n     * if an error occurs in the try block, this console.log will display the error message in the dev tools\r\n     */\r\n    console.log(\"error from the fetchDataByCountries function: \", e.message);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  /**\r\n   *  What this does: Request GET api to fetch all countries name over the world\r\n   *\r\n   */\r\n  try {\r\n    /**\r\n     *  What this does: Fetch data based on the API url\r\n     */\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  /**\r\n   *  What this does: Request GET api to fetch all corona cases by a country\r\n   *\r\n   */\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({\r\n      confirmed: confirmed.total,\r\n      deaths: deaths.total,\r\n      date,\r\n    }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport { fetchCountries } from \"../api/index\";\r\nimport styles from \"./countryPicker.module.css\";\r\n\r\n/**\r\n *  What this does: this class component enables a user to pick a specific country to view the country Covid cases\r\n *  Feature: 1. Drop down lists have created that displays all countries in the world\r\n *           2.\r\n */\r\nclass CountryPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      country: \"\",\r\n      fetchedCountries: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    /**\r\n     *  What this does: Fetch Covid cases data and set the value using setState()\r\n     */\r\n    const fetchedAllCountries = await fetchCountries();\r\n\r\n    const fetchedCountries = fetchedAllCountries.map((result) => {\r\n      return result.name;\r\n    });\r\n    this.setState({ fetchedCountries: fetchedCountries });\r\n  }\r\n\r\n  render() {\r\n    const { fetchedCountries } = this.state;\r\n\r\n    return (\r\n      /**\r\n       *  What this does: Dropdown lists are created for the user that can choose one country\r\n       */\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect\r\n          defaultValue=\"\"\r\n          onChange={(e) => {\r\n            console.log(\"e.target.value:\", e.target.value);\r\n            this.props.handleCountryChange(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">Global</option>\r\n          {fetchedCountries.length\r\n            ? fetchedCountries.map((country, i) => (\r\n                <option key={i} value={country}>\r\n                  {\" \"}\r\n                  {country}{\" \"}\r\n                </option>\r\n              ))\r\n            : null}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./chart.module.css\";\r\n\r\nimport { fetchDailyData } from \"./../api/index\";\r\n\r\n/**\r\n *  What this does: this class component is for displaying charts with Covid-19 cases data\r\n *  Feature: 1. Two different charts show in the web page\r\n *           2. Fetch Covid cases data depending on a specific country\r\n */\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //initilize the state\r\n      fetchedDailyDataByCountry: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    /**\r\n     *  What this does: Fetch Covid cases data and set the value using setState()\r\n     */\r\n    const fetchedDailyDataByCountry = await fetchDailyData();\r\n    this.setState({ fetchedDailyDataByCountry });\r\n  }\r\n\r\n  barChart() {\r\n    /**\r\n     *  What this does: display a bar chart using Covid-19 cases data\r\n     *\r\n     */\r\n    const { confirmed, recovered, deaths } = this.props.fetchedCovidCasesData;\r\n    const { country } = this.props;\r\n\r\n    if (confirmed) {\r\n      return (\r\n        <Bar\r\n          data={{\r\n            labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n            datasets: [\r\n              {\r\n                label: \"People\",\r\n                backgroundColor: [\r\n                  \"rgba(0, 0, 255, 0.5)\",\r\n                  \"rgba(0, 255, 0, 0.5)\",\r\n                  \"rgba(255, 0, 0, 0.5)\",\r\n                ],\r\n                data: [confirmed.value, recovered.value, deaths.value],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: `Current state in ${country}` },\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  lineChart() {\r\n    /**\r\n     *  What this does: display a line chart using Covid-19 cases data\r\n     *\r\n     */\r\n    const dailyData = this.state.fetchedDailyDataByCountry;\r\n\r\n    if (dailyData[0]) {\r\n      // What this does: This If statement checks when dailyData has a value in it\r\n      return (\r\n        <Line\r\n          data={{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [\r\n              {\r\n                data: dailyData.map((data) => data.confirmed),\r\n                label: \"Infected\",\r\n                borderColor: \"#3333ff\",\r\n                fill: true,\r\n              },\r\n              {\r\n                data: dailyData.map((data) => data.deaths),\r\n                label: \"Deaths\",\r\n                borderColor: \"red\",\r\n                backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                fill: true,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    /**\r\n     * Conditional Rendering\r\n     * What this does: For the landing page, the line chart will be displayed but once the user clicks\r\n     *                 the specific country, the bar chart will be displayed\r\n     *\r\n     */\r\n    // const { country } = this.props;\r\n    return (\r\n      <div className={styles.container}>\r\n        {/* {country ? this.barChart() : this.lineChart()} */}\r\n        {this.barChart()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","export default __webpack_public_path__ + \"static/media/covid.9e5d4fc7.png\";","//import react and react-hooks\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n//import components\r\nimport Cards from \"./functional-components/cards\";\r\nimport CountryPicker from \"./class-components/countrypicker\";\r\nimport Chart from \"./class-components/chart\";\r\n\r\n//import API\r\nimport { fetchDataByCountries } from \"./api\";\r\n// import { fetchCountries } from \"./api\";\r\n\r\nimport styles from \"./app.module.css\";\r\nimport covidImage from \"../src/images/covid.png\";\r\n\r\n/**\r\n *  What this does: This is a main functional component that controls all API data and structurs all components\r\n *  Feature: 1. Fetch and transfer data to child components as prop\r\n *           2. Handle 'country' data when a user select a specific country\r\n */\r\nconst App = () => {\r\n  /**\r\n   *  What this does: Used a react useState() hook to treate data as state\r\n   *  Feature: 1. The setState function is used to update the state\r\n   *\r\n   */\r\n  const [fetchedCovidCasesData, setfetchedCovidCasesData] = useState({});\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    /**\r\n     *  What this does: same as componentDidMount(), this fetches Covid cases data just after rendering\r\n     *  Feature: 1. The setState function is used to update the state\r\n     *           2. Used Async/Await to allows an asynchronous\r\n     *\r\n     */\r\n    const fetchedDataByCountries = async () => {\r\n      const initialFetchedData = await fetchDataByCountries();\r\n      setfetchedCovidCasesData(initialFetchedData);\r\n    };\r\n    fetchedDataByCountries();\r\n  }, []);\r\n\r\n  const handleCountryChange = async (country) => {\r\n    /**\r\n     *  What this does:\r\n     *  Feature: 1. The setState function is used to update the state\r\n     *           2. Used Async/Await to allows an asynchronous\r\n     *\r\n     */\r\n    const fetchedDataByCountries = await fetchDataByCountries(country);\r\n\r\n    setfetchedCovidCasesData(fetchedDataByCountries);\r\n    setCountry(country);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={covidImage} alt=\"COVID-19\" />\r\n        <Cards fetchedCovidCasesData={fetchedCovidCasesData} />\r\n        <CountryPicker handleCountryChange={handleCountryChange} />\r\n        <Chart\r\n          fetchedCovidCasesData={fetchedCovidCasesData}\r\n          country={country}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n/**\n *\n *\n * This application has been built to show the\n *\n */\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__1kmNP\",\"image\":\"app_image__3eqXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countryPicker_formControl__p5wu6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__KDFXI\"};"],"sourceRoot":""}